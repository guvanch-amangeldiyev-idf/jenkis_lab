// Mocks generated by Mockito 5.1.0 from annotations
// in data/test/networking_repository_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:data/service/api_service.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0<T> extends _i1.Fake implements _i2.Response<T> {}

class _FakeDioError_1 extends _i1.Fake implements _i2.DioError {}

class _FakeRequestOptions_2 extends _i1.Fake implements _i2.RequestOptions {}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<T>> get<T>(
          {String? path,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [], {
                #path: path,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_0<T>()))
          as _i4.Future<_i2.Response<T>>);
  @override
  _i4.Future<_i2.Response<T>> post<T>(
          {String? path,
          Map<String, dynamic>? data,
          List<int>? certificateBytes,
          List<int>? privateKeyBytes,
          List<int>? clientAuthoritiesBytes,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i2.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [], {
                #path: path,
                #data: data,
                #certificateBytes: certificateBytes,
                #privateKeyBytes: privateKeyBytes,
                #clientAuthoritiesBytes: clientAuthoritiesBytes,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i2.Response<T>>.value(_FakeResponse_0<T>()))
          as _i4.Future<_i2.Response<T>>);
}

/// A class which mocks [CancelToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelToken extends _i1.Mock implements _i2.CancelToken {
  MockCancelToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  bool get isCancelled =>
      (super.noSuchMethod(Invocation.getter(#isCancelled), returnValue: false)
          as bool);
  @override
  _i4.Future<_i2.DioError> get whenCancel =>
      (super.noSuchMethod(Invocation.getter(#whenCancel),
              returnValue: Future<_i2.DioError>.value(_FakeDioError_1()))
          as _i4.Future<_i2.DioError>);
  @override
  void cancel([dynamic reason]) =>
      super.noSuchMethod(Invocation.method(#cancel, [reason]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i2.DioError {
  MockDioError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_2()) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set response(_i2.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);
  @override
  _i2.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i2.DioErrorType.connectTimeout) as _i2.DioErrorType);
  @override
  set type(_i2.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
}
